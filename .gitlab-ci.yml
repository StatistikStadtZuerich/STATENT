default:
  image: $CI_REGISTRY/docker-hub-proxy/rocker/tidyverse:4.3.2

variables:
  CONTAINER_REGISTRY: $CI_REGISTRY
  CONTAINER_REGISTRY_USERNAME: $CI_REGISTRY_USER
  CONTAINER_REGISTRY_PASSWORD: $CI_REGISTRY_PASSWORD
  CONTAINER_REPOSITORY: $SWID
  CONTAINER_IMAGE_NAME: $CI_PROJECT_NAME # used for container image name
  COMPONENT_NAME: $CI_PROJECT_NAME # used for component name (alias name) in umbrella chart
  GIT_STRATEGY: fetch
  RENV_PATHS_CACHE: ${CI_PROJECT_DIR}/renv/cache


cache:
  key: ${CI_PROJECT_NAME}
  paths:
    - ${RENV_PATHS_CACHE}

stages:
  - deploy_test
  - deploy_prod
  - test1
  - test2
  - test3

deploy-job-test:
  # ausgeführt wenn push in merge request
  stage: deploy_test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  variables:
    APP_NAME: $TEST_NAME
  before_script:
    - Rscript -e "renv::restore()"
  script:
    - Rscript -e "renv::status()"
    #- Rscript -e "source('data-raw/create_latest_data.R')"
    #- Rscript -e "source('dev/deploy.R')"

test-job-1:
  # ausgeführt wenn push in merge request
  stage: test1
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  variables:
    APP_NAME: $TEST_NAME
  before_script:
    - Rscript -e "renv::restore()"
  script:
    #- Rscript -e "a <- data.table::fread('https://data.integ.stadt-zuerich.ch/dataset/int_dwh_bfs_wir_statent_ast_beschaeftigte_vza_sektor_jahr_od2551/download/WIR255OD2551.csv', encoding = 'UTF-8')"
    - Rscript -e "a <- data.table::fread('https://www.web.statistik.zh.ch/ogd/daten/ressourcen/KTZH_00002683_00005504.csv')"
    #- Rscript -e "source('data-raw/create_latest_data.R')"
    #- Rscript -e "source('dev/deploy.R')"

test-job-2:
  # ausgeführt wenn push in merge request
  stage: test2
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  variables:
    APP_NAME: $TEST_NAME
  before_script:
    - Rscript -e "renv::restore()"
  script:
    - Rscript -e "source('data-raw/create_latest_data.R')"
    #- Rscript -e "source('dev/deploy.R')"

test-job-3:
  # ausgeführt wenn push in merge request
  stage: test3
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  variables:
    APP_NAME: $TEST_NAME
  before_script:
    - Rscript -e "renv::restore()"
  script:
    #- Rscript -e "source('data-raw/create_latest_data.R')"
    - Rscript -e "source('dev/deploy.R')"

deploy-job-prod:
  # ausgeführt wenn Push auf Main branch
  stage: deploy_prod
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  variables:
    APP_NAME: $PROD_NAME
  before_script:
    - Rscript -e "renv::restore()"
  script:
    - Rscript -e "renv::restore()"
    - Rscript -e "source('data-raw/create_latest_data.R')"
    - Rscript -e "source('dev/deploy.R')"
    